# Copyright 2019 CSIRO 
# Copyright 2020 seL4 Project a Series of LF Projects, LLC.
#    SPDX-License-Identifier: GPL-2.0-only
#
from mod_python import apache
import string
import sys, os, cgi
import urllib.request, urllib.error, urllib.parse
import subprocess
from ertos import *
import re
from ertos_config import cfg

def get_title(req):
        return "Validation Check"

def source_markup(line, char):
    if char >= len(line):
        # The error is at the end of the line
        line += ' '
    left = line[:char].replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
    center = line[char].replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
    right = line[char+1:].replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

    return '%s<span style="background-color:yellow;"><strong>%s</strong></span>%s' % (left, center, right)


def main_page(req, query, path):
    req.write('<h1>Web XHTML Validator</h1>')

    req.write('<table class="ertos_table" style="width: 100%; margin-bottom: 15px;">')
    req.write('<tr><th>File: %s</th><th>Validation Result</th></tr>' % path)

    # The reason we open the real site and not just read the file is because
    # we need to validate the file as it appears to the end-user, not before being
    # parsed.
    url = "http://%s/%s" % ('localhost', path[len(CONTENTROOT)+1:len(path)])

    code_dir = cfg.get('core','code_dir')

    # Validate file
    open_url = None
        
    try:
        open_url = urllib.request.urlopen(url)
        
    except urllib.error.HTTPError as msg:
        result = '<span style="color: #FF0000;">Couldn\'t open url for checking: %s</span>' % msg

    log = "&nbsp;"
    output = ""

    if open_url and "Content-Type" in open_url.info():
        content = open_url.info()["Content-Type"].split(";")[0]

        if open_url and content == "text/html":
            data = open_url.read().decode('utf-8')
            src_lines = data.split("\n")
            # Install wdg-html-validator package for this to work.
            # r, w = popen2.popen2("validate --charset='utf-8'")
            # or for NU validator:
            output = subprocess.run(["/usr/local/bin/validate", url],
	    	   capture_output=True,
		   encoding='utf-8').stdout
            if len(output) > 1 : # Ignore the ***Errors***
                result = '<span style="color: #FF0000;">Validation Failed!</span>'
                log = '<pre>'
                lines = output.split("\n")
                strong = False
                for line in lines:
                    matches = re.match('^[^:]*:([0-9]+)\.([0-9]+)-([0-9]+)\.([0-9]+):.*$', line)
                    if matches:
                        line_num_start = int(matches.group(1))
                        char_start = int(matches.group(2))
                        line_num_end = int(matches.group(3))
                        char_end = int(matches.group(4))
                        log += "From Line %d, char %d to line %d char %d" % (line_num_start, char_start, line_num_end, char_end)
                        log += source_markup(src_lines[line_num_start-1], char_start-1)
                        log += "\n<strong>%s</strong>\n" % line

                        strong = True
                    elif line.startswith("Line:"):
                        strong = False
                        log += "%s\n" % line
                    else:
                        if strong:
                            log += "<strong>"
                        log += "%s\n" % line
                        if strong:
                            log += "</strong>"
                log += "</pre>"
            else:
                result = '<span style="color: #00FF00;">Validation Passed!</span>'
        else:
            result = '<span style="color: #FF0000;">Couldn\'t Validate</span>'

    elif open_url:
        result = 'Couldn\'t get content-type'

    req.write('<td>%s</td><td style="font-weight: bold; font-size: 18px;">%s</td></tr>' % (log, result))

    if len(output):
        req.write('<tr><td colspan="2">Note: Line number is in the templated website, not the content you\'re editing</td></tr>') 

    req.write("</table>")

    return apache.OK

def handler(req, q, path):

    global CONTENTROOT
    cfg.read(req.get_options()['site_config'])
    CONTENTROOT = cfg.get('core', 'content_dir')
        
    req.content_type = "text/html"
    req.send_http_header()
    if cfg.getboolean('core', 'production'):
       return apache.HTTP_NOT_FOUND

    if req.args is not None:
        query = cgi.parse_qs(req.read())
    else:
        query = {}

    http_status_code = main_page(req, q, path)

    return http_status_code
